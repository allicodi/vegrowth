% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alt_tests.R
\name{get_adjusted_hudgens_stat}
\alias{get_adjusted_hudgens_stat}
\title{Function for Hudgens-style bounds on effect that incorporate covariates}
\usage{
get_adjusted_hudgens_stat(
  data,
  models,
  family = "gaussian",
  lower_bound = TRUE
)
}
\arguments{
\item{data}{dataframe containing dataset to use for analysis}

\item{models}{list of pre-fit models needed for estimation}

\item{family}{gaussian for continuous outcome G, binomial for binary outcome}

\item{lower_bound}{A boolean. If TRUE, then adds the smallest growth measures
to the infected vaccines thereby yielding a lower
bound on the effect of interest. If FALSE, then adds the largest
growth measures to the infected vacccinees thereby yielding an upper
bound on the effect of interest.}
}
\value{
Hudgens-style estimate of bound on effect in naturally infected
}
\description{
Currently assumes that the conditional mean of G follows a linear model
with Normal errors.
}
\examples{

n <- 1e4
X <- sample(seq(-1,1), n, replace = TRUE)
p_immune <- 0.5 + 0.25 * X
p_doomed <- 0.1 + 0.05 * X
p_helped <- 1 - (p_immune + p_doomed)
ps <- mapply(
  p_i = p_immune, p_d = p_doomed, p_h = p_helped, 
  FUN = function(p_i, p_d, p_h){
    sample(
      c("immune", "doomed", "helped"), 
      size = 1, prob = c(p_i, p_d, p_h)
    )
  }
)

V <- rbinom(n, 1, 0.5)
Y0 <- ifelse(ps == "immune", 0, 1)
Y1 <- ifelse(ps == "doomed", 1, 0)
Y <- ifelse(V == 1, Y1, Y0)
G1 <- 1*X - 0.5 * Y1 + rnorm(n, 0, 0.5)
G0 <- 1*X - 0.5 * Y0 + rnorm(n, 0, 0.5)
G <- ifelse(V == 1, G1, G0)

marginal_effect <- mean(G1 - G0)
ps_effect <- mean(G1[Y0 == 1] - G0[Y0 == 1])

data <- data.frame(X, V, Y, G)
models <- fit_models(data)

get_adjusted_hudgens_stat(data, models, lower_bound = TRUE)
# compare to unadjusted
get_hudgens_stat(data, lower_bound = TRUE)

get_adjusted_hudgens_stat(data, models, lower_bound = FALSE)
# compare to unadjusted
get_hudgens_stat(data, lower_bound = FALSE)

# binary outcome
G_binary <- as.numeric(G > 1)
data <- data.frame(X, V, Y, G = G_binary)
models <- fit_models(data, family = binomial())
get_adjusted_hudgens_stat(data, models, family = "binomial", lower_bound = TRUE)
get_adjusted_hudgens_stat(data, models, family = "binomial", lower_bound = FALSE)


}
